---
- name: Check whether upload_module exists
  stat:
    path: "/usr/lib64/nginx/modules/ngx_http_upload_module.so"
  register: stat_result

- name: Build upload module if it doesn't exist
  become: true
  when: not stat_result.stat.exists
  block:
    - name: Register installed nginx version
      shell: echo "$(nginx -v 2>&1 | cut -d '/' -f 2 | cut -d ' ' -f 1)"  # note this must use shell rather than command
      register: nginx_version

    - name: Make a directory for build operations
      file:
        path: "{{ nginx_build_module_dir }}"
        state: directory

    - name: Install the prerequisites
      dnf:
        name: ['perl-devel', 'perl-ExtUtils-Embed', 'gd-devel', 'libxslt-devel', 'pcre-devel', 'openssl-devel', 'make', 'gcc', 'gcc-c++', 'libtool', 'automake', 'autoconf', 'git']
        state: present

    - name: Get configure arguments for nginx
      shell: echo "$(nginx -V 2>&1 | grep 'configure arguments')"  # note this must use shell rather than command
      register: configure_arguments_line

    - name: Get configure arguments excluding label and any --add_dynamic_module flags
      set_fact:
        configure_arguments: "{{ configure_arguments | default([]) + [item] }}"
      with_items: "{{ configure_arguments_line.stdout.split()[2:] }}"
      when: '"--add-dynamic-module" not in item'

    - name: Download and unzip nginx source code
      unarchive:
        src: "https://nginx.org/download/nginx-{{ nginx_version.stdout }}.tar.gz"
        dest: "{{ nginx_build_module_dir }}/"
        list_files: true
        remote_src: true
      register: nginx_source_download

    - name: Extract nginx_source_dir from nginx_source_download variable
      set_fact:
        nginx_source_dir: "{{ nginx_source_download.files | first | replace('/', '') }}"

    - name: Download and unzip module source code
      unarchive:
        src: "{{ nginx_upload_module_source_url }}"
        dest: "{{ nginx_build_module_dir }}/"
        list_files: true
        remote_src: true
      register: module_source_download

    - name: Extract module_source_dir from module_source_download variable
      set_fact:
        module_source_dir: "{{ module_source_download.files | first | replace('/', '') }}"

    - name: Invoke configure with configure_arguments and added module
      command:
        cmd: "./configure {{ configure_arguments | join(' ') }} --add-dynamic-module=../{{ module_source_dir}} "
        chdir: "{{ nginx_build_module_dir }}/{{ nginx_source_dir }}"

    # Upload module uses depricated OpenSSL APIs and this causes the build to fail
    # because Nginx uses the -Werror and -Werror=format-security in the compile flags.
    # Removing these flags from the Makefile will build the upload module successfully.
    - name: Remove -Werror and -Werror=format-security from objs/Makefile
      command:
        cmd: sed -i '/^CFLAGS = /s/{{ item }}//' "{{ nginx_build_module_dir }}/{{ nginx_source_dir }}/objs/Makefile"
      with_items:
        - '-Werror '
        - '-Werror=format-security '

    - name: Build module
      command:
        cmd: make modules
        chdir: "{{ nginx_build_module_dir }}/{{ nginx_source_dir }}"

    - name: Copy the compiled upload module to Nginx modules dir
      command:
        cmd: cp objs/ngx_http_upload_module.so /usr/lib64/nginx/modules/
        chdir: "{{ nginx_build_module_dir }}/{{ nginx_source_dir }}"

    - name: Edit the Nginx configuration file to load the upload module
      lineinfile:
        path: /etc/nginx/nginx.conf
        line: "load_module /usr/lib64/nginx/modules/ngx_http_upload_module.so;"
        insertafter: '^pid*'
        firstmatch: true
        state: present
      notify:
        - Restart Nginx service

    - name: Clean up the build directory
      file:
        path: "{{ nginx_build_module_dir }}"
        state: absent
